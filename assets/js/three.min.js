// WebGLRenderer
class WebGLRenderer {
  constructor(params = {}) {
    this.domElement = document.createElement("canvas");
    this.context = this.domElement.getContext("webgl", {
      alpha: params.alpha,
      antialias: params.antialias,
    });
  }
  setSize(width, height) {
    this.domElement.width = width;
    this.domElement.height = height;
  }
  setClearColor(color, alpha) {
    this.clearColor = color;
    this.clearAlpha = alpha;
  }
  render(scene, camera) {
    this.context.clearColor(
      this.clearColor.r,
      this.clearColor.g,
      this.clearColor.b,
      this.clearAlpha
    );
    this.context.clear(this.context.COLOR_BUFFER_BIT);
  }
}

// Scene
class Scene {
  constructor() {
    this.children = [];
  }
  add(object) {
    this.children.push(object);
  }
}

// PerspectiveCamera
class PerspectiveCamera {
  constructor(fov, aspect, near, far) {
    this.fov = fov;
    this.aspect = aspect;
    this.near = near;
    this.far = far;
  }
}

// PlaneGeometry
class PlaneGeometry {
  constructor(width, height) {
    this.width = width;
    this.height = height;
  }
}

// ShaderMaterial
class ShaderMaterial {
  constructor(params) {
    this.uniforms = params.uniforms || {};
    this.vertexShader = params.vertexShader || '';
    this.fragmentShader = params.fragmentShader || '';
  }
}

// Mesh
class Mesh {
  constructor(geometry, material) {
    this.geometry = geometry;
    this.material = material;
  }
}

// Color
class Color {
  constructor(hex) {
    this.set(hex);
  }
  set(hex) {
    this.r = ((hex >> 16) & 255) / 255;
    this.g = ((hex >> 8) & 255) / 255;
    this.b = (hex & 255) / 255;
  }
}

// Fog
class Fog {
  constructor(color, near = 1, far = 1000) {
    this.color = new Color(color);
    this.near = near;
    this.far = far;
  }
}

// Vector2
class Vector2 {
  constructor(x = 0, y = 0) {
    this.x = x;
    this.y = y;
  }
}

// Vector3
class Vector3 {
  constructor(x = 0, y = 0, z = 0) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
}

// Export
export {
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  PlaneGeometry,
  ShaderMaterial,
  Mesh,
  Color,
  Fog,
  Vector2,
  Vector3,
};